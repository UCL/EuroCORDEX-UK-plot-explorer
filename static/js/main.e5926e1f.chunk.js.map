{"version":3,"sources":["components/FigureRow.js","components/OptionsRow.js","components/PlotExplorerContainer.js","App.js","reportWebVitals.js","index.js"],"names":["FigureRow","plotvars","seasons","periods","plottypes","some","el","map","plotvar","season","period","plottype","Row","className","Figure","FigureImage","alt","label","src","process","value","plotvarOptions","options","periodOptions","seasonOptions","plottypeOptions","OptionsRow","setPlotvars","setSeasons","setPeriods","setPlottypes","Col","xs","onChange","placeholder","isClearable","isMulti","PlotExplorerRow","useState","Container","App","PlotExplorerContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5926e1f.chunk.js","sourcesContent":["import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Figure from 'react-bootstrap/Figure';\nimport FigureImage from 'react-bootstrap/FigureImage';\n\nfunction FigureRow({plotvars, seasons, periods, plottypes}){\n/*\n  This displays the plots after checking the options chosen by the user.\n  It will display something as soon as there's a choice made for each of the 4\n  drowdowns. It will also automatically delete images as user deselects a\n  choice.\n*/\n\n  // Don't try to show a plot until the user has selected at least one value of\n  // each dropdown\n  if ([plotvars, seasons, periods, plottypes].some(el => el === null)) {\n    return(null);\n  }\n  else {\n    // Once selection is made, group plots by plot type, then delve into the\n    // other selected options.\n    // TODO: check with research team this is the best way to proceed.\n    return(\n      <>\n        {plotvars.map(plotvar => (\n          seasons.map(season => (\n            periods.map(period => (\n              plottypes.map(plottype => (\n                <Row className=\"py-4\">\n                  <Figure>\n                    <FigureImage\n                     alt={plottype.label + \" not found for '\" + plotvar.label + \"' on season '\" + season.label + \"' and period '\" + period.label + \"'.\"}\n                     src={`${process.env.PUBLIC_URL}/images/${plotvar.value}/${plottype.value}_${plotvar.value}_${season.value}_${period.value}.png`}\n                    />\n                  </Figure>\n                </Row>\n              ))\n            ))\n          ))\n        ))}\n      </>\n    );\n  }\n};\n\nexport default FigureRow;\n","import React from 'react';\nimport Select from 'react-select';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n// TODO: Some of these might not be relevant anymore\n// TODO: Check grouping makes sense\nconst plotvarOptions = [\n  {\n    label: \"Temperature\",\n    options: [\n      { value: 'tas', label: 'tas - Daily Near-Surface Air Temperature' },\n      { value: 'tasmax', label: 'tasmax - Daily Maximum Near-Surface Air Temperature' },\n      { value: 'tasmin', label: 'tasmin - Daily Minimum Near-Surface Air Temperature' },\n      { value: 'tas99', label: 'tas99 - 99th Percentile of Daily Mean Near-Surface Air Temperatures' },\n      { value: 'tas01', label: 'tas01 - 1st Percentile of Daily Mean Near-Surface Air Temperatures' },\n      { value: 'tas', label: 'tas - Near-Surface Air Temperature' }\n    ],\n  },\n  {\n    label: \"Precipitation\",\n    options: [\n      { value: 'fwd', label: 'fwd - Proportion of wet days' },\n      { value: 'pr', label: 'pr - Daily precipitation rate' },\n      { value: 'r99ptot', label: 'r99ptot - r99ptot' },\n      { value: 'prc', label: 'prc - Daily rate of Convective Precipitation' },\n      { value: 'prsn', label: 'prsn - Daily rate of precipitation falling as snow' }\n    ],\n  },\n  {\n    label: \"Wind\",\n    options: [\n      { value: 'sfcWind', label: 'sfcWind - Near-Surface Wind Speed' },\n      { value: 'wsgsmax', label: 'wsgsmax - Daily Maximum Near-Surface Wind Speed of Gust' },\n      { value: 'uas', label: 'uas - Eastward Near-Surface Wind' },\n      { value: 'vas', label: 'vas - Northward Near-Surface Wind' }\n    ],\n  },\n  {\n    label: \"Other\",\n    options: [\n      { value: 'rss', label: 'rss - Net surface long wave flux' },\n      { value: 'rls', label: 'rls - Net surface long wave flux' },\n      { value: 'clt', label: 'clt - Total Cloud Fraction' },\n      { value: 'psl', label: 'psl - Sea Level Pressure' },\n      { value: 'hurs', label: 'hurs - Near-Surface Relative humidity' }\n    ]\n  }\n];\n\n// TODO: This list will be updated as more plots are generated. It covers ~100\n// years.\nconst periodOptions = [\n  { value: '19890101-20081231', label: '1989-2008' }\n]\n\n// TODO: Check season names are OK with research team as typical users might be\n// more familiar with value names e.g. DJF\nconst seasonOptions = [\n  { value: 'DJF', label: 'DJF - Winter' },\n  { value: 'MAM', label: 'MAM - Spring' },\n  { value: 'JJA', label: 'JJA - Summer' },\n  { value: 'SON', label: 'SON - Autumn' }\n]\n\n// TODO: More plot types to be added.\nconst plottypeOptions = [\n  { value: 'eval-boxplots', label: 'Box plots of spread within each ensemble' },\n  { value: 'eval-maps', label: 'Maps of observations & biases' },\n  { value: 'eval-pca-gcm', label: 'PCA GCM plots' },\n  { value: 'eval-pca-rcm', label: 'PCA RCM plots' },\n  { value: 'eval-Taylor', label: 'Taylor plots' }\n]\n\n\nfunction OptionsRow({setPlotvars, setSeasons, setPeriods, setPlottypes}){\n/*\n  Displays 4 dropdown lists to let user make a selection. Users should be able\n  to select several options in each least.\n*/\n  return(\n    <Row className=\"pt-4\">\n       <Col xs={5}>\n         <Select\n           options={plotvarOptions}\n           onChange={setPlotvars}\n           placeholder=\"Select variable\"\n           isClearable = {false}\n           isMulti\n           />\n       </Col>\n       <Col>\n         <Select\n           options={seasonOptions}\n           onChange={setSeasons}\n           placeholder=\"Select season\"\n           isClearable = {false}\n           isMulti\n           />\n       </Col>\n       <Col>\n         <Select\n           options={periodOptions}\n           onChange={setPeriods}\n           placeholder=\"Select period\"\n           isClearable = {false}\n           isMulti\n           />\n       </Col>\n       <Col xs={3}>\n         <Select\n           options={plottypeOptions}\n           onChange={setPlottypes}\n           placeholder=\"Select plot type\"\n           isClearable = {false}\n           isMulti\n           />\n       </Col>\n     </Row>\n  );\n};\n\nexport default OptionsRow;","import React, { useState } from \"react\";\nimport FigureRow from \"./FigureRow\";\nimport OptionsRow from \"./OptionsRow\";\nimport Container from \"react-bootstrap/Container\";\n\nfunction PlotExplorerRow() {\n  /* This is the entry point to the main page. It handles state passing from\n  user selected choices in OptionsRow to the array of plots displayed by\n  FigureRow.\n  */\n\n  // Handles state for the 4 differe choice types the user has to make\n  const [plotvars, setPlotvars] = useState([]);\n  const [seasons, setSeasons] = useState([]);\n  const [periods, setPeriods] = useState([]);\n  const [plottypes, setPlottypes] = useState([]);\n\n  return (\n    <Container>\n\n      <OptionsRow\n        setPlotvars={setPlotvars}\n        setSeasons={setSeasons}\n        setPeriods={setPeriods}\n        setPlottypes={setPlottypes}\n      />\n\n      <FigureRow\n        plotvars={plotvars}\n        seasons={seasons}\n        periods={periods}\n        plottypes={plottypes}\n      />\n\n    </Container>\n  );\n}\nexport default PlotExplorerRow;\n","import PlotExplorerContainer from './components/PlotExplorerContainer';\n\nfunction App() {\n  return (\n    <PlotExplorerContainer/>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}