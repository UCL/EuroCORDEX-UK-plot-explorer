{"version":3,"sources":["components/FigureRow.js","components/OptionsRow.js","components/PlotExplorerContainer.js","App.js","reportWebVitals.js","index.js"],"names":["FigureRow","plotvars","seasons","periods","plottypes","some","el","map","plotvar","season","period","plottype","Row","className","Figure","FigureImage","href","value","src","process","plotvarOptions","label","periodOptions","seasonOptions","plottypeOptions","OptionsRow","setPlotvars","setSeasons","setPeriods","setPlottypes","Col","options","onChange","placeholder","isMulti","PlotExplorerRow","useState","Container","App","PlotExplorerContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6235678.chunk.js","sourcesContent":["import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Figure from 'react-bootstrap/Figure';\nimport FigureImage from 'react-bootstrap/FigureImage';\n\nfunction FigureRow({plotvars, seasons, periods, plottypes}){\n/*\n  This displays the plots after checking the options chosen by the user.\n  It will display something as soon as there's a choice made for each of the 4\n  drowdowns. It will also automatically delete images as user deselects a\n  choice.\n*/\n\n  // Don't try to show a plot until the user has selected at least one value of\n  // each dropdown\n  if ([plotvars, seasons, periods, plottypes].some(el => el === null)) {\n    return(null);\n  }\n  else {\n    // Once selection is made, group plots by plot type, then delve into the\n    // other selected options.\n    // TODO: check with research team this is the best way to proceed.\n    return(\n      <>\n        {plotvars.map(plotvar => (\n          seasons.map(season => (\n            periods.map(period => (\n              plottypes.map(plottype => (\n                <Row className=\"py-4\">\n                  <Figure>\n                    <FigureImage\n                     href={`Image not found for ${plotvar.value} ${plottype.value} ${season.value} ${period.value}`}\n                     src={`${process.env.PUBLIC_URL}/images/${plotvar.value}/${plottype.value}_${plotvar.value}_${season.value}_${period.value}.png`}\n                    />\n                  </Figure>\n                </Row>\n              ))\n            ))\n          ))\n        ))}\n      </>\n    );\n  }\n};\n\nexport default FigureRow;\n","import React from 'react';\nimport Select from 'react-select';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n// Some of these might not be relevant anymore\nconst plotvarOptions = [\n  { value: 'fwd', label: 'fwd - Proportion of wet days' },\n  { value: 'tas', label: 'tas - Daily Near-Surface Air Temperature' },\n  { value: 'tasmax', label: 'tasmax - Daily Maximum Near-Surface Air Temperature' },\n  { value: 'tasmin', label: 'tasmin - Daily Minimum Near-Surface Air Temperature' },\n  { value: 'tas99', label: 'tas99 - 99th Percentile of Daily Mean Near-Surface Air Temperatures' },\n  { value: 'tas01', label: 'tas01 - 1st Percentile of Daily Mean Near-Surface Air Temperatures' },\n  { value: 'pr', label: 'pr - Daily precipitation rate' },\n  { value: 'r99ptot', label: 'r99ptot - r99ptot' },\n  { value: 'sfcWind', label: 'sfcWind - Near-Surface Wind Speed' },\n  { value: 'rss', label: 'rss - Net surface long wave flux' },\n  { value: 'clt', label: 'clt - Total Cloud Fraction' },\n  { value: 'prc', label: 'prc - Daily rate of Convective Precipitation' },\n  { value: 'tas', label: 'tas - Near-Surface Air Temperature' },\n  { value: 'wsgsmax', label: 'wsgsmax - Daily Maximum Near-Surface Wind Speed of Gust' },\n  { value: 'psl', label: 'psl - Sea Level Pressure' },\n  { value: 'hurs', label: 'hurs - Near-Surface Relative humidity' },\n  { value: 'uas', label: 'uas - Eastward Near-Surface Wind' },\n  { value: 'vas', label: 'vas - Northward Near-Surface Wind ' },\n  { value: 'prsn', label: 'prsn - Daily rate of precipitation falling as snow' },\n  { value: 'rls', label: 'rls - Net surface long wave flux' }\n];\n\n// TODO: This list will be updated as more plots are generated. It covers ~100\n// years.\nconst periodOptions = [\n  { value: '19890101-20081231', label: '1989-2008' }\n]\n\n// TODO: Check season names are OK with research team as typical users might be\n// more familiar with value names e.g. DJF\nconst seasonOptions = [\n  { value: 'DJF', label: 'DJF - Winter' },\n  { value: 'MAM', label: 'MAM - Spring' },\n  { value: 'JJA', label: 'JJA - Summer' },\n  { value: 'SON', label: 'SON - Autumn' }\n]\n\n// TODO: More plot types to be added.\nconst plottypeOptions = [\n  { value: 'eval-boxplots', label: 'Box plots of spread within each ensemble' },\n  { value: 'eval-maps', label: 'Maps of observations & biases' },\n  { value: 'eval-pca-gcm', label: 'PCA GCM plots' },\n  { value: 'eval-pca-rcm', label: 'PCA RCM plots' },\n  { value: 'eval-Taylor', label: 'Taylor plots' }\n]\n\n\nfunction OptionsRow({setPlotvars, setSeasons, setPeriods, setPlottypes}){\n/*\n  Displays 4 dropdown lists to let user make a selection. Users should be able\n  to select several options in each least.\n*/\n  return(\n    <Row className=\"pt-4\">\n       <Col>\n         <Select\n           options={plotvarOptions}\n           onChange={setPlotvars}\n           placeholder=\"Select variable\"\n           isMulti\n           />\n       </Col>\n       <Col>\n         <Select\n           options={seasonOptions}\n           onChange={setSeasons}\n           placeholder=\"Select season\"\n           isMulti\n           />\n       </Col>\n       <Col>\n         <Select\n           options={periodOptions}\n           onChange={setPeriods}\n           placeholder=\"Select period\"\n           isMulti\n           />\n       </Col>\n       <Col>\n         <Select\n           options={plottypeOptions}\n           onChange={setPlottypes}\n           placeholder=\"Select plot type\"\n           isMulti\n           />\n       </Col>\n     </Row>\n  );\n};\n\nexport default OptionsRow;","import React, { useState } from \"react\";\nimport FigureRow from \"./FigureRow\";\nimport OptionsRow from \"./OptionsRow\";\nimport Container from \"react-bootstrap/Container\";\n\nfunction PlotExplorerRow() {\n  /* This is the entry point to the main page. It handles state passing from\n  user selected choices in OptionsRow to the array of plots displayed by\n  FigureRow.\n  */\n\n  // Handles state for the 4 differe choice types the user has to make\n  const [plotvars, setPlotvars] = useState([]);\n  const [seasons, setSeasons] = useState([]);\n  const [periods, setPeriods] = useState([]);\n  const [plottypes, setPlottypes] = useState([]);\n\n  return (\n    <Container>\n\n      <OptionsRow\n        setPlotvars={setPlotvars}\n        setSeasons={setSeasons}\n        setPeriods={setPeriods}\n        setPlottypes={setPlottypes}\n      />\n\n      <FigureRow\n        plotvars={plotvars}\n        seasons={seasons}\n        periods={periods}\n        plottypes={plottypes}\n      />\n\n    </Container>\n  );\n}\nexport default PlotExplorerRow;\n","import PlotExplorerContainer from './components/PlotExplorerContainer';\n\nfunction App() {\n  return (\n    <PlotExplorerContainer/>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}