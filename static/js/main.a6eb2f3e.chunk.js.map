{"version":3,"sources":["components/FigureRow.js","components/OptionsRow.js","components/PlotExplorerContainer.js","App.js","reportWebVitals.js","index.js"],"names":["FigureRow","plotvar","evalagainst","regmodel","timeperiod","Row","className","Figure","Image","alt","src","process","value","plotvars","label","evalagainsts","regmodels","timeperiods","OptionsRow","setPlotvar","setEvalagainst","setRegmodel","setTimeperiod","Col","options","onChange","placeholder","PlotExplorerRow","useState","dataRows","setDataRows","console","log","Container","map","row","index","Button","onClick","undefined","dataRow","addDataRow","variant","App","PlotExplorerContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6eb2f3e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Figure from 'react-bootstrap/Figure';\nimport FigureImage from 'react-bootstrap/FigureImage';\nimport FigureCaption from 'react-bootstrap/FigureCaption';\n\nfunction FigureRow({plotvar, evalagainst, regmodel, timeperiod}){\n\n  return(\n    <Row className=\"py-4\">\n       <Figure>\n         <Figure.Image\n           alt=\"Image NOT found\"\n           src={`${process.env.PUBLIC_URL}/images/rmse-decomposition_${plotvar.value}_${evalagainst.value}_${regmodel.value}_${timeperiod.value}.png`}\n         />\n       </Figure>\n     </Row>\n  );\n};\n\nexport default FigureRow;","import React, { useState } from 'react';\nimport Select from 'react-select';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nconst plotvars = [\n  { value: 'snw', label: 'Surface Snow Amount' },\n  { value: 'tasmax', label: 'Daily Maximum Near-Surface Air Temperature' },\n  { value: 'rss', label: 'Net surface long wave flux' },\n  { value: 'clt', label: 'Total Cloud Fraction' },\n  { value: 'prc', label: 'Convective Precipitation' },\n  { value: 'tas', label: 'Near-Surface Air Temperature' },\n  { value: 'tasmin', label: 'Daily Minimum Near-Surface Air Temperature' },\n  { value: 'wsgsmax', label: 'Daily Maximum Near-Surface Wind Speed of Gust' },\n  { value: 'psl', label: 'Sea Level Pressure' },\n  { value: 'pr', label: 'Precipitation' },\n  { value: 'sfcWind', label: 'Near-Surface Wind Speed' },\n  { value: 'hurs', label: 'Near-Surface Relative humidity' },\n  { value: 'uas', label: 'Eastward Near-Surface Wind' },\n  { value: 'vas', label: 'Northward Near-Surface Wind ' },\n  { value: 'prsn', label: 'Snowfall Flux' },\n  { value: 'rls', label: 'Net surface long wave flux' }\n];\n\nconst evalagainsts = [\n  { value: 'ECMWF-ERAINT', label: 'ECMWF-ERAINT' },\n  { value: 'HadUK-grid', label: 'HadUK-grid' }\n]\n\nconst regmodels = [\n  { value: 'ALADIN63', label: 'ALADIN63' },\n  { value: 'COSMO-crCLIM-v1-1', label: 'COSMO-crCLIM-v1-1' },\n  { value: 'WRF381P', label: 'WRF381P' },\n  { value: 'REMO2015', label: 'REMO2015' },\n  { value: 'RCA4', label: 'RCA4' },\n  { value: 'RACMO22E', label: 'RACMO22E' },\n  { value: 'HIRHAM5', label: 'HIRHAM5' },\n  { value: 'HadREM3-GA7-05', label: 'HadREM3-GA7-05' },\n  { value: 'RegCM4-6', label: 'RegCM4-6' },\n  { value: 'CCLM4-8-17', label: 'CCLM4-8-17' }\n]\n\nconst timeperiods = [\n  { value: 'Jan', label: 'January' },\n  { value: 'Feb', label: 'February' },\n  { value: 'Mar', label: 'March' },\n  { value: 'Apr', label: 'April' },\n  { value: 'May', label: 'May' },\n  { value: 'Jun', label: 'June' },\n  { value: 'Jul', label: 'July' },\n  { value: 'Aug', label: 'August' },\n  { value: 'Sep', label: 'September' },\n  { value: 'Oct', label: 'October' },\n  { value: 'Nov', label: 'November' },\n  { value: 'Dec', label: 'December' },\n  { value: 'DJF', label: 'DJF' },\n  { value: 'MAM', label: 'MAM' },\n  { value: 'JJA', label: 'JJA' },\n  { value: 'SON', label: 'SON' }\n]\n\n\nfunction OptionsRow({setPlotvar, setEvalagainst, setRegmodel, setTimeperiod}){\n\n  return(\n    <Row className=\"pt-4\">\n       <Col>\n         <Select\n           options={plotvars}\n           onChange={setPlotvar}\n           placeholder=\"Select variable\"\n           />\n       </Col>\n       <Col>\n         <Select\n           options={regmodels}\n           onChange={setRegmodel}\n           placeholder=\"Select regional model\"\n           />\n       </Col>\n       <Col>\n         <Select\n           options={evalagainsts}\n           onChange={setEvalagainst}\n           placeholder=\"Evaluate against\"\n           />\n       </Col>\n       <Col>\n         <Select\n           options={timeperiods}\n           onChange={setTimeperiod}\n           placeholder=\"Select time period\"\n           />\n       </Col>\n     </Row>\n  );\n};\n\nexport default OptionsRow;","import React, { useState } from \"react\";\nimport FigureRow from \"./FigureRow\";\nimport OptionsRow from \"./OptionsRow\";\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\n\nfunction PlotExplorerRow() {\n  const [plotvar, setPlotvar] = useState(null);\n  const [evalagainst, setEvalagainst] = useState(null);\n  const [regmodel, setRegmodel] = useState(null);\n  const [timeperiod, setTimeperiod] = useState(null);\n  const [dataRows, setDataRows] = useState([]);\n\n  console.log(plotvar, evalagainst, regmodel, timeperiod);\n\n  const addDataRow = () => {\n    if (plotvar === null || plotvar === undefined) {\n      console.log(\"error, you didnt make enough selections\");\n      return;\n    }\n    const dataRow = {\n      plotvar: plotvar,\n      evalagainst: evalagainst,\n      regmodel: regmodel,\n      timeperiod: timeperiod,\n    };\n    console.log(dataRows);\n    setDataRows([...dataRows, dataRow]);\n  };\n\n\n  const delDataRow = (index) => {\n    console.log(index);\n    console.log(dataRows);\n    console.log(dataRows.splice(index, 1));\n    setDataRows(dataRows.splice(index, 1));\n  };\n\n  return (\n    <Container>\n\n      {dataRows.map((row, index) => {\n        console.log(index);\n        return (\n          <>\n            <FigureRow\n              plotvar={row.plotvar}\n              evalagainst={row.evalagainst}\n              regmodel={row.regmodel}\n              timeperiod={row.timeperiod}\n            />\n          </>\n        );\n      })}\n      <OptionsRow\n        setPlotvar={setPlotvar}\n        setEvalagainst={setEvalagainst}\n        setRegmodel={setRegmodel}\n        setTimeperiod={setTimeperiod}\n      />\n      <Row className=\"py-5\">\n        <Button onClick={() => addDataRow()} variant=\"outline-info\">\n          Show plot\n        </Button>{\" \"}\n      </Row>\n    </Container>\n  );\n}\nexport default PlotExplorerRow;\n","import PlotExplorerContainer from './components/PlotExplorerContainer';\n\nfunction App() {\n  return (\n    <PlotExplorerContainer/>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}